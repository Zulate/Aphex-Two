{
  "version": 3,
  "sources": ["../../three/examples/jsm/helpers/ViewHelper.js"],
  "sourcesContent": ["import {\n\tCylinderGeometry,\n\tCanvasTexture,\n\tColor,\n\tEuler,\n\tMesh,\n\tMeshBasicMaterial,\n\tObject3D,\n\tOrthographicCamera,\n\tQuaternion,\n\tRaycaster,\n\tSprite,\n\tSpriteMaterial,\n\tSRGBColorSpace,\n\tVector2,\n\tVector3,\n\tVector4\n} from 'three';\n\n/**\n * A special type of helper that visualizes the camera's transformation\n * in a small viewport area as an axes helper. Such a helper is often wanted\n * in 3D modeling tools or scene editors like the [three.js editor]{@link https://threejs.org/editor}.\n *\n * The helper allows to click on the X, Y and Z axes which animates the camera\n * so it looks along the selected axis.\n *\n * @augments Object3D\n * @three_import import { ViewHelper } from 'three/addons/helpers/ViewHelper.js';\n */\nclass ViewHelper extends Object3D {\n\n\t/**\n\t * Constructs a new view helper.\n\t *\n\t * @param {Camera} camera - The camera whose transformation should be visualized.\n\t * @param {HTMLDOMElement} [domElement] - The DOM element that is used to render the view.\n\t */\n\tconstructor( camera, domElement ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isViewHelper = true;\n\n\t\t/**\n\t\t * Whether the helper is currently animating or not.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default false\n\t\t */\n\t\tthis.animating = false;\n\n\t\t/**\n\t\t * The helper's center point.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.center = new Vector3();\n\n\t\tconst color1 = new Color( '#ff4466' );\n\t\tconst color2 = new Color( '#88ff44' );\n\t\tconst color3 = new Color( '#4488ff' );\n\t\tconst color4 = new Color( '#000000' );\n\n\t\tconst options = {};\n\n\t\tconst interactiveObjects = [];\n\t\tconst raycaster = new Raycaster();\n\t\tconst mouse = new Vector2();\n\t\tconst dummy = new Object3D();\n\n\t\tconst orthoCamera = new OrthographicCamera( - 2, 2, 2, - 2, 0, 4 );\n\t\torthoCamera.position.set( 0, 0, 2 );\n\n\t\tconst geometry = new CylinderGeometry( 0.04, 0.04, 0.8, 5 ).rotateZ( - Math.PI / 2 ).translate( 0.4, 0, 0 );\n\n\t\tconst xAxis = new Mesh( geometry, getAxisMaterial( color1 ) );\n\t\tconst yAxis = new Mesh( geometry, getAxisMaterial( color2 ) );\n\t\tconst zAxis = new Mesh( geometry, getAxisMaterial( color3 ) );\n\n\t\tyAxis.rotation.z = Math.PI / 2;\n\t\tzAxis.rotation.y = - Math.PI / 2;\n\n\t\tthis.add( xAxis );\n\t\tthis.add( zAxis );\n\t\tthis.add( yAxis );\n\n\t\tconst spriteMaterial1 = getSpriteMaterial( color1 );\n\t\tconst spriteMaterial2 = getSpriteMaterial( color2 );\n\t\tconst spriteMaterial3 = getSpriteMaterial( color3 );\n\t\tconst spriteMaterial4 = getSpriteMaterial( color4 );\n\n\t\tconst posXAxisHelper = new Sprite( spriteMaterial1 );\n\t\tconst posYAxisHelper = new Sprite( spriteMaterial2 );\n\t\tconst posZAxisHelper = new Sprite( spriteMaterial3 );\n\t\tconst negXAxisHelper = new Sprite( spriteMaterial4 );\n\t\tconst negYAxisHelper = new Sprite( spriteMaterial4 );\n\t\tconst negZAxisHelper = new Sprite( spriteMaterial4 );\n\n\t\tposXAxisHelper.position.x = 1;\n\t\tposYAxisHelper.position.y = 1;\n\t\tposZAxisHelper.position.z = 1;\n\t\tnegXAxisHelper.position.x = - 1;\n\t\tnegYAxisHelper.position.y = - 1;\n\t\tnegZAxisHelper.position.z = - 1;\n\n\t\tnegXAxisHelper.material.opacity = 0.2;\n\t\tnegYAxisHelper.material.opacity = 0.2;\n\t\tnegZAxisHelper.material.opacity = 0.2;\n\n\t\tposXAxisHelper.userData.type = 'posX';\n\t\tposYAxisHelper.userData.type = 'posY';\n\t\tposZAxisHelper.userData.type = 'posZ';\n\t\tnegXAxisHelper.userData.type = 'negX';\n\t\tnegYAxisHelper.userData.type = 'negY';\n\t\tnegZAxisHelper.userData.type = 'negZ';\n\n\t\tthis.add( posXAxisHelper );\n\t\tthis.add( posYAxisHelper );\n\t\tthis.add( posZAxisHelper );\n\t\tthis.add( negXAxisHelper );\n\t\tthis.add( negYAxisHelper );\n\t\tthis.add( negZAxisHelper );\n\n\t\tinteractiveObjects.push( posXAxisHelper );\n\t\tinteractiveObjects.push( posYAxisHelper );\n\t\tinteractiveObjects.push( posZAxisHelper );\n\t\tinteractiveObjects.push( negXAxisHelper );\n\t\tinteractiveObjects.push( negYAxisHelper );\n\t\tinteractiveObjects.push( negZAxisHelper );\n\n\t\tconst point = new Vector3();\n\t\tconst dim = 128;\n\t\tconst turnRate = 2 * Math.PI; // turn rate in angles per second\n\n\t\t/**\n\t\t * Renders the helper in a separate view in the bottom-right corner\n\t\t * of the viewport.\n\t\t *\n\t\t * @param {WebGLRenderer|WebGPURenderer} renderer - The renderer.\n\t\t */\n\t\tthis.render = function ( renderer ) {\n\n\t\t\tthis.quaternion.copy( camera.quaternion ).invert();\n\t\t\tthis.updateMatrixWorld();\n\n\t\t\tpoint.set( 0, 0, 1 );\n\t\t\tpoint.applyQuaternion( camera.quaternion );\n\n\t\t\t//\n\n\t\t\tconst x = domElement.offsetWidth - dim;\n\t\t\tconst y = renderer.isWebGPURenderer ? domElement.offsetHeight - dim : 0;\n\n\t\t\trenderer.clearDepth();\n\n\t\t\trenderer.getViewport( viewport );\n\t\t\trenderer.setViewport( x, y, dim, dim );\n\n\t\t\trenderer.render( this, orthoCamera );\n\n\t\t\trenderer.setViewport( viewport.x, viewport.y, viewport.z, viewport.w );\n\n\t\t};\n\n\t\tconst targetPosition = new Vector3();\n\t\tconst targetQuaternion = new Quaternion();\n\n\t\tconst q1 = new Quaternion();\n\t\tconst q2 = new Quaternion();\n\t\tconst viewport = new Vector4();\n\t\tlet radius = 0;\n\n\t\t/**\n\t\t * This method should be called when a click or pointer event\n\t\t * has happened in the app.\n\t\t *\n\t\t * @param {PointerEvent} event - The event to process.\n\t\t * @return {boolean} Whether an intersection with the helper has been detected or not.\n\t\t */\n\t\tthis.handleClick = function ( event ) {\n\n\t\t\tif ( this.animating === true ) return false;\n\n\t\t\tconst rect = domElement.getBoundingClientRect();\n\t\t\tconst offsetX = rect.left + ( domElement.offsetWidth - dim );\n\t\t\tconst offsetY = rect.top + ( domElement.offsetHeight - dim );\n\t\t\tmouse.x = ( ( event.clientX - offsetX ) / ( rect.right - offsetX ) ) * 2 - 1;\n\t\t\tmouse.y = - ( ( event.clientY - offsetY ) / ( rect.bottom - offsetY ) ) * 2 + 1;\n\n\t\t\traycaster.setFromCamera( mouse, orthoCamera );\n\n\t\t\tconst intersects = raycaster.intersectObjects( interactiveObjects );\n\n\t\t\tif ( intersects.length > 0 ) {\n\n\t\t\t\tconst intersection = intersects[ 0 ];\n\t\t\t\tconst object = intersection.object;\n\n\t\t\t\tprepareAnimationData( object, this.center );\n\n\t\t\t\tthis.animating = true;\n\n\t\t\t\treturn true;\n\n\t\t\t} else {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t};\n\n\t\t/**\n\t\t * Sets labels for each axis. By default, they are unlabeled.\n\t\t *\n\t\t * @param {string|undefined} labelX - The label for the x-axis.\n\t\t * @param {string|undefined} labelY - The label for the y-axis.\n\t\t * @param {string|undefined} labelZ - The label for the z-axis.\n\t\t */\n\t\tthis.setLabels = function ( labelX, labelY, labelZ ) {\n\n\t\t\toptions.labelX = labelX;\n\t\t\toptions.labelY = labelY;\n\t\t\toptions.labelZ = labelZ;\n\n\t\t\tupdateLabels();\n\n\t\t};\n\n\t\t/**\n\t\t * Sets the label style. Has no effect when the axes are unlabeled.\n\t\t *\n\t\t * @param {string} [font='24px Arial'] - The label font.\n\t\t * @param {string} [color='#000000'] - The label color.\n\t\t * @param {number} [radius=14] - The label radius.\n\t\t */\n\t\tthis.setLabelStyle = function ( font, color, radius ) {\n\n\t\t\toptions.font = font;\n\t\t\toptions.color = color;\n\t\t\toptions.radius = radius;\n\n\t\t\tupdateLabels();\n\n\t\t};\n\n\t\t/**\n\t\t * Updates the helper. This method should be called in the app's animation\n\t\t * loop.\n\t\t *\n\t\t * @param {number} delta - The delta time in seconds.\n\t\t */\n\t\tthis.update = function ( delta ) {\n\n\t\t\tconst step = delta * turnRate;\n\n\t\t\t// animate position by doing a slerp and then scaling the position on the unit sphere\n\n\t\t\tq1.rotateTowards( q2, step );\n\t\t\tcamera.position.set( 0, 0, 1 ).applyQuaternion( q1 ).multiplyScalar( radius ).add( this.center );\n\n\t\t\t// animate orientation\n\n\t\t\tcamera.quaternion.rotateTowards( targetQuaternion, step );\n\n\t\t\tif ( q1.angleTo( q2 ) === 0 ) {\n\n\t\t\t\tthis.animating = false;\n\n\t\t\t}\n\n\t\t};\n\n\t\t/**\n\t\t * Frees the GPU-related resources allocated by this instance. Call this\n\t\t * method whenever this instance is no longer used in your app.\n\t\t */\n\t\tthis.dispose = function () {\n\n\t\t\tgeometry.dispose();\n\n\t\t\txAxis.material.dispose();\n\t\t\tyAxis.material.dispose();\n\t\t\tzAxis.material.dispose();\n\n\t\t\tposXAxisHelper.material.map.dispose();\n\t\t\tposYAxisHelper.material.map.dispose();\n\t\t\tposZAxisHelper.material.map.dispose();\n\t\t\tnegXAxisHelper.material.map.dispose();\n\t\t\tnegYAxisHelper.material.map.dispose();\n\t\t\tnegZAxisHelper.material.map.dispose();\n\n\t\t\tposXAxisHelper.material.dispose();\n\t\t\tposYAxisHelper.material.dispose();\n\t\t\tposZAxisHelper.material.dispose();\n\t\t\tnegXAxisHelper.material.dispose();\n\t\t\tnegYAxisHelper.material.dispose();\n\t\t\tnegZAxisHelper.material.dispose();\n\n\t\t};\n\n\t\tfunction prepareAnimationData( object, focusPoint ) {\n\n\t\t\tswitch ( object.userData.type ) {\n\n\t\t\t\tcase 'posX':\n\t\t\t\t\ttargetPosition.set( 1, 0, 0 );\n\t\t\t\t\ttargetQuaternion.setFromEuler( new Euler( 0, Math.PI * 0.5, 0 ) );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'posY':\n\t\t\t\t\ttargetPosition.set( 0, 1, 0 );\n\t\t\t\t\ttargetQuaternion.setFromEuler( new Euler( - Math.PI * 0.5, 0, 0 ) );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'posZ':\n\t\t\t\t\ttargetPosition.set( 0, 0, 1 );\n\t\t\t\t\ttargetQuaternion.setFromEuler( new Euler() );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'negX':\n\t\t\t\t\ttargetPosition.set( - 1, 0, 0 );\n\t\t\t\t\ttargetQuaternion.setFromEuler( new Euler( 0, - Math.PI * 0.5, 0 ) );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'negY':\n\t\t\t\t\ttargetPosition.set( 0, - 1, 0 );\n\t\t\t\t\ttargetQuaternion.setFromEuler( new Euler( Math.PI * 0.5, 0, 0 ) );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'negZ':\n\t\t\t\t\ttargetPosition.set( 0, 0, - 1 );\n\t\t\t\t\ttargetQuaternion.setFromEuler( new Euler( 0, Math.PI, 0 ) );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error( 'ViewHelper: Invalid axis.' );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tradius = camera.position.distanceTo( focusPoint );\n\t\t\ttargetPosition.multiplyScalar( radius ).add( focusPoint );\n\n\t\t\tdummy.position.copy( focusPoint );\n\n\t\t\tdummy.lookAt( camera.position );\n\t\t\tq1.copy( dummy.quaternion );\n\n\t\t\tdummy.lookAt( targetPosition );\n\t\t\tq2.copy( dummy.quaternion );\n\n\t\t}\n\n\t\tfunction getAxisMaterial( color ) {\n\n\t\t\treturn new MeshBasicMaterial( { color: color, toneMapped: false } );\n\n\t\t}\n\n\t\tfunction getSpriteMaterial( color, text ) {\n\n\t\t\tconst { font = '24px Arial', color: labelColor = '#000000', radius = 14 } = options;\n\n\t\t\tconst canvas = document.createElement( 'canvas' );\n\t\t\tcanvas.width = 64;\n\t\t\tcanvas.height = 64;\n\n\t\t\tconst context = canvas.getContext( '2d' );\n\t\t\tcontext.beginPath();\n\t\t\tcontext.arc( 32, 32, radius, 0, 2 * Math.PI );\n\t\t\tcontext.closePath();\n\t\t\tcontext.fillStyle = color.getStyle();\n\t\t\tcontext.fill();\n\n\t\t\tif ( text ) {\n\n\t\t\t\tcontext.font = font;\n\t\t\t\tcontext.textAlign = 'center';\n\t\t\t\tcontext.fillStyle = labelColor;\n\t\t\t\tcontext.fillText( text, 32, 41 );\n\n\t\t\t}\n\n\t\t\tconst texture = new CanvasTexture( canvas );\n\t\t\ttexture.colorSpace = SRGBColorSpace;\n\n\t\t\treturn new SpriteMaterial( { map: texture, toneMapped: false } );\n\n\t\t}\n\n\t\tfunction updateLabels() {\n\n\t\t\tposXAxisHelper.material.map.dispose();\n\t\t\tposYAxisHelper.material.map.dispose();\n\t\t\tposZAxisHelper.material.map.dispose();\n\n\t\t\tposXAxisHelper.material.dispose();\n\t\t\tposYAxisHelper.material.dispose();\n\t\t\tposZAxisHelper.material.dispose();\n\n\t\t\tposXAxisHelper.material = getSpriteMaterial( color1, options.labelX );\n\t\t\tposYAxisHelper.material = getSpriteMaterial( color2, options.labelY );\n\t\t\tposZAxisHelper.material = getSpriteMaterial( color3, options.labelZ );\n\n\t\t}\n\n\t}\n\n}\n\nexport { ViewHelper };\n"],
  "mappings": "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",
  "names": ["radius"]
}
